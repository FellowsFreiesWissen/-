<!DOCTYPE html>
<html lang="en">

<head>
    <title>A little Ogham Stone Reference Minion</title>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script type="text/javascript" src="vis-network.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossorigin="anonymous"></script>

    <style type="text/css">
        #mynetwork {
            width: 800px;
            height: 800px;
            border: 1px solid lightgray;
        }

        #ids {
            width: 800px;
        }

        body {
            padding-left: 20px !important;
        }

        .accordion-item {
            width: 800px !important;
        }
    </style>
</head>

<body>
    <br>
    <h1>A little Ogham Stone Reference Minion</h1>
    <br>
    <select id="ids" class="form-select" aria-label="Default select example"></select>
    <br>
    <div id="mynetwork"></div>
    <br>
    <div class="accordion" id="accordionPanelsStayOpenExample">
        <div class="accordion-item">
            <h2 class="accordion-header" id="panelsStayOpen-headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="true" aria-controls="panelsStayOpen-collapseOne">
                    What can I do here?
                </button>
            </h2>
            <div id="panelsStayOpen-collapseOne" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingOne">
                <div class="accordion-body">
                    Ogham Stones have various reference numbers. One of the most popular numbering schemes is the CIIC scheme by <a href="https://en.wikipedia.org/wiki/R._A._Stewart_Macalister" target="_blank">R.A.S. Macálister</a>. The Celtic
                    Inscribed Stones Project (<a href="https://www.ucl.ac.uk/archaeology/cisp/database/" target="_blank">CISP</a>) has stored a lot of cross references. The `Ogham Stones in the Wikimedia Universe` project extended these data and <a
                        href="https://github.com/ogi-ogham/ogham-datav1/blob/main/csv/ogham/og_stones_references.csv" target="_blank">published them openly</a>. This tools shows the cross references of Ogham Stones. Just choose one starting point
                    and explore the data!
                </div>
            </div>
        </div>
        <div class="accordion-item">
            <h2 class="accordion-header" id="panelsStayOpen-headingTwo">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="true" aria-controls="panelsStayOpen-collapseTwo">
                    Data Information
                </button>
            </h2>
            <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingTwo">
                <div class="accordion-body">
                    The data belongs to the <a href="http://ogham.squirrel.link/" target="_blank">Irish ᚑᚌᚆᚐᚋ Stones in the Wikimedia Universe</a> project. This project is funded by Wikimedia Deutschland and the <a href="https://en.wikiversity.org/wiki/Wikimedia_Deutschland/Open_Science_Fellows_Program"
                        target="_blank">Open Science Fellows Program</a>.
                    <br><br>
                    <center><img src="http://lookup.ogham.link/Wiki_Ogham_Logo.png" width="300"></center>
                    <br>
                    <center><img src="https://github.com/ogi-ogham/ogham-datav1/raw/main/img/Fellowship.png" width="300"></center>
                </div>
            </div>
        </div>
    </div>
    <hr style="width:800px;" />
    <p>&nbsp;&nbsp;&nbsp;&#10132; developed by <strong>Florian Thiery M.Sc.</strong> | CC BY 4.0 | <a href="https://github.com/FellowsFreiesWissen/Ogham" target="_blank">GitHub</a></p>

    <script type="text/javascript">
        let nodes = new vis.DataSet([]);
        let edges = new vis.DataSet([]);
        let nodes1 = [];
        let triplestore = "https://java-dev.rgzm.de/rdf4j-server/repositories/zz";

        let findGetParameter = (parameterName) => {
            let result = null;
            let tmp = [];
            location.search
                .substr(1)
                .split("&")
                .forEach(function(item) {
                    tmp = item.split("=");
                    if (tmp[0] === parameterName) result = decodeURIComponent(tmp[1]);
                });
            return result;
        };

        let RDF4J = {};
        RDF4J.queryData = (sparql, callback, step) => {
            let thisNode = findGetParameter("node");
            if (thisNode === null) {
                thisNode = "macalister_1945:141";
            }
            $("#ids").val(thisNode);
            //let thisNode = $('#ids').find(":selected").text();
            setTimeout(function() {
                $.ajax({
                    async: false,
                    url: triplestore,
                    dataType: 'jsonp',
                    type: 'GET',
                    data: {
                        queryLn: 'SPARQL',
                        query: sparql.replace("#query#", thisNode),
                        Accept: 'application/json'
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        console.error(errorThrown);
                    },
                    success: function(response) {
                        try {
                            response = JSON.parse(response);
                        } catch (e) {}
                        var vars = response.head.vars;
                        var bindings = response.results.bindings;
                        const bindings_copy = Object.assign({}, bindings);
                        for (var item in bindings) {
                            for (var varstr in vars) {
                                var tblTxt = "";
                                if (bindings[item][vars[varstr]].type === "uri") {
                                    var val = bindings[item][vars[varstr]].value;
                                    bindings_copy[item][vars[varstr]].value = val;
                                } else if (bindings[item][vars[varstr]]["xml:lang"]) {
                                    bindings_copy[item][vars[varstr]].value = bindings[item][vars[varstr]].value + "@" + bindings[item][vars[varstr]]["xml:lang"];
                                } else if (bindings[item][vars[varstr]].type === "bnode") {
                                    bindings_copy[item][vars[varstr]].value = "_:" + bindings[item][vars[varstr]].value;
                                } else {
                                    bindings_copy[item][vars[varstr]].value = bindings[item][vars[varstr]].value
                                }
                            }
                        }
                        response.results.bindings = bindings_copy;
                        if (typeof callback === 'function') {
                            callback(response);
                        } else {
                            return response;
                        }
                    }
                });
            }, 100);
        };

        let queryLabels = (sparql) => {
            setTimeout(function() {
                $.ajax({
                    async: false,
                    url: triplestore,
                    dataType: 'jsonp',
                    type: 'GET',
                    data: {
                        queryLn: 'SPARQL',
                        query: sparql,
                        Accept: 'application/json'
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        console.error(errorThrown);
                    },
                    success: function(response) {
                        try {
                            response = JSON.parse(response);
                        } catch (e) {}
                        var vars = response.head.vars;
                        var bindings = response.results.bindings;
                        const bindings_copy = Object.assign({}, bindings);
                        for (var item in bindings) {
                            for (var varstr in vars) {
                                var tblTxt = "";
                                if (bindings[item][vars[varstr]].type === "uri") {
                                    var val = bindings[item][vars[varstr]].value;
                                    bindings_copy[item][vars[varstr]].value = val;
                                } else if (bindings[item][vars[varstr]]["xml:lang"]) {
                                    bindings_copy[item][vars[varstr]].value = bindings[item][vars[varstr]].value + "@" + bindings[item][vars[varstr]]["xml:lang"];
                                } else if (bindings[item][vars[varstr]].type === "bnode") {
                                    bindings_copy[item][vars[varstr]].value = "_:" + bindings[item][vars[varstr]].value;
                                } else {
                                    bindings_copy[item][vars[varstr]].value = bindings[item][vars[varstr]].value
                                }
                            }
                        }
                        response.results.bindings = bindings_copy;
                        for (let x in bindings_copy) {
                            var o = new Option(bindings_copy[x].label.value, bindings_copy[x].label.value);
                            $(o).html(bindings_copy[x].label.value);
                            if (bindings_copy[x].label.value.includes("ciic:") || bindings_copy[x].label.value.includes("cisp:200") || bindings_copy[x].label.value.includes("squirrel:") || bindings_copy[x].label.value.includes(
                                    "o3d:300")) {} else {
                                $("#ids").append(o);
                            }
                        }
                        RDF4J.queryData(query_nodes, setNodes, 0);
                    }
                });
            }, 100);
        };

        let setNodes = (data) => {
            nodes1 = [];
            let bindings = data.results.bindings;
            console.log(bindings);
            for (let x in bindings) {
                let tmp_node = {};
                tmp_node.id = bindings[x].label1.value;
                tmp_node.label = bindings[x].label1.value;
                if (tmp_node.label.includes("macalister")) {
                    tmp_node.color = "#00ff99";
                }
                if (tmp_node.label.includes("cisp")) {
                    tmp_node.color = "#cc6600";
                }
                if (tmp_node.label.includes("o3d")) {
                    tmp_node.color = "#cc3399";
                }
                //if (tmp_node.id.includes("ciic:") || tmp_node.id.includes("cisp:200") || tmp_node.id.includes("squirrel:") || tmp_node.id.includes("o3d:300")) {} else {
                if (tmp_node.id.includes("ciic:") || tmp_node.id.includes("cisp:200") || tmp_node.id.includes("o3d:300")) {} else {
                    if (!nodes1.find(o => o.id === bindings[x].label1.value)) {
                        nodes1.push(tmp_node);
                    }
                }
            }
            for (let x in bindings) {
                let tmp_node = {};
                tmp_node.id = bindings[x].label2.value;
                tmp_node.label = bindings[x].label2.value;
                if (tmp_node.label.includes("macalister")) {
                    tmp_node.color = "#00ff99";
                }
                if (tmp_node.label.includes("cisp")) {
                    tmp_node.color = "#cc6600";
                }
                if (tmp_node.label.includes("o3d")) {
                    tmp_node.color = "#cc3399";
                }
                //if (tmp_node.id.includes("ciic:") || tmp_node.id.includes("cisp:200") || tmp_node.id.includes("squirrel:") || tmp_node.id.includes("o3d:300")) {} else {
                if (tmp_node.id.includes("ciic:") || tmp_node.id.includes("cisp:200") || tmp_node.id.includes("o3d:300")) {} else {
                    if (!nodes1.find(o => o.id === bindings[x].label2.value)) {
                        nodes1.push(tmp_node);
                    }
                }
            }
            for (let x in bindings) {
                let tmp_node = {};
                tmp_node.id = bindings[x].label3.value;
                tmp_node.label = bindings[x].label3.value;
                if (tmp_node.label.includes("macalister")) {
                    tmp_node.color = "#00ff99";
                }
                if (tmp_node.label.includes("cisp")) {
                    tmp_node.color = "#cc6600";
                }
                if (tmp_node.label.includes("o3d")) {
                    tmp_node.color = "#cc3399";
                }
                //if (tmp_node.id.includes("ciic:") || tmp_node.id.includes("cisp:200") || tmp_node.id.includes("squirrel:") || tmp_node.id.includes("o3d:300")) {} else {
                if (tmp_node.id.includes("ciic:") || tmp_node.id.includes("cisp:200") || tmp_node.id.includes("o3d:300")) {} else {
                    if (!nodes1.find(o => o.id === bindings[x].label3.value)) {
                        nodes1.push(tmp_node);
                    }
                }
            }
            console.log("nodes1", nodes1);
            nodes.add(nodes1);
            RDF4J.queryData(query_edges, setEdges);
        }

        let setEdges = (data) => {
            let bindings = data.results.bindings;
            //console.log(bindings);
            for (let x in bindings) {
                let tmp_edge = {};
                tmp_edge.from = bindings[x].alabel.value;
                tmp_edge.to = bindings[x].blabel.value;
                edges.add(tmp_edge);
            }
            setNetwork();
        }

        var network = 0;
        let setNetwork = (data) => {
            var data = {
                nodes: nodes,
                edges: edges,
            };
            var options = {
                layout: {
                    randomSeed: 1,
                    improvedLayout: false,
                },
                nodes: {
                    shapeProperties: {
                        interpolation: false // 'true' for intensive zooming
                    }
                },
                physics: {
                    stabilization: false
                }
            };
            network = new vis.Network(container, data, options);
            network.on("stabilizationIterationsDone", function() {
                network.setOptions({
                    physics: false
                });
            });
        }

        let query_nodes =
            "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX oghamonto: <http://ontology.ogham.link/> SELECT DISTINCT * WHERE { ?stone1 rdfs:label ?label1. ?stone2 rdfs:label ?label2. ?stone1 oghamonto:equals ?stone2. FILTER (?label1 = '#query#') OPTIONAL { ?stone3 rdfs:label ?label3. ?stone2 oghamonto:equals ?stone3. } OPTIONAL { ?stone4 rdfs:label ?label4. ?stone2 oghamonto:equals ?stone4. } }";
        let query_edges = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX oghamonto: <http://ontology.ogham.link/> SELECT DISTINCT ?alabel ?blabel WHERE { ?a oghamonto:equals ?b. ?a rdfs:label ?alabel. ?b rdfs:label ?blabel. }";
        let query_labels = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX oghamonto: <http://ontology.ogham.link/> SELECT DISTINCT * WHERE { ?stone rdfs:label ?label. } ORDER BY ASC(?label)";
        queryLabels(query_labels);

        // create a network
        var container = document.getElementById("mynetwork");

        $('#ids').on('change', function() {
            window.open("?node=" + $('#ids').find(":selected").text(), "_self");
        });
    </script>
</body>

</html>